# -*- coding: utf-8 -*-
"""Clase6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1efEyxyRs7SBTWKU-fPh2RJoxkxkK_tC9
"""

# En el caso de spyder 
# pip install matplotlib

# Definamos los modulos basicos 
import math as m
import random as rnd 
import numpy as np
import os 

# Modulo visulizacion : matplotlib
# Submodulo pyplot
import matplotlib.pyplot as plt

# Grafico 1 : Dos listas
# Eje-X : Variable independiente
x = [0.2, 0.6, 1.3]

# Eje-Y : Variable dependiente
y =[np.pi, np.exp(2), np.pi**(2.8)]

# Diagramacion de dispersion 
plt.plot(x,y)
plt.show()

# Documentacion de plot 
help(plt.plot)

# Documentacion de la funcion linspace
help(np.linspace)

# Grafico 2 : Aprendamos a usar np.linspace

# Dominio o conjunto de partida 
x = np.linspace(-np.pi/3 , 5, num = 600)

# Variable dependiente la vamos a asignar mediante
# una regla de correspondencia 
y = np.sin(x**2)*np.exp(-x**(2.3))

# Mostremos el grafico de x vs. y
plt.plot(x,y)
plt.show()

# Observacion 
# La forma como definimos la variable dependiente puede cambiar

# Podemos usar una funcion para definir la regla decorrespondencia
def f1(x):
  return np.sin(x**2)*np.exp(-x**(2.3))

yf1 = f1(x)

# Podemos usar una funcion de tipo lambda para definir nuestra  regla de correspondencia
f2 = lambda x: np.sin(x**2)*np.exp(-x**(2.3))

yf2 = f2(x)

# Comparar yf1 con yf2

yf1 == yf2

# GRafico 3
Dom = np.linspace(8, 16, 200)
z = np.exp(np.sqrt(Dom**(1/8)))

plt.plot(Dom, z)
plt.show()

# GRafico 3.5
# COnsideremos el dominio [-5,5] y las reglas de correspondencia
# y1 = sin(x**(1/7))
# y2 = exp(-x**2)

dom35 = np.linspace(-5,5 , 200)
y1 = np.sin(x**(1/7))
y2 = np.exp(-x**2)

# MOstremos losdos conjuntos de puntos (x,y1) y (x,y2)
# plt.plot(x,y1, x,y2)
# plt.plot(x,y1,'+k', x,y2,'--b')
plt.plot(x,y1,'+k', x,y2,'-.b')
plt.show()

# Grafico 4 : Consideremos una señal y una señal con ruido

x = np.linspace(-np.pi/3, 5 , num = 600)

# Señal
z = np.exp(np.sqrt(x**(1/8)))

# Señal con ruido
zRuido = z + np.random.normal(0,1.1, size = len(x))*0.01

# Ploteemos 
# plt.plot(x,z,'-g', x,zRuido,'*r')
plt.plot(x,zRuido,'-g', x,z,'*r')
plt.show()

# GRafico 5 : Agrandamos la imagen 
plt.figure(figsize = (10,10))

x = np.linspace(-np.pi/3, 5 , num = 600)

# Señal
z = np.exp(np.sqrt(x**(1/8)))

# Señal con ruido
zRuido = z + np.random.normal(0,1.1, size = len(x))*0.01

# Ploteemos 
# plt.plot(x,z,'-g', x,zRuido,'*r')
plt.plot(x,zRuido,'-g', x,z,'*r')

# Guardamos la imagen en el disco duro 
plt.savefig("Fig5_Señal_SeñalRuido")

plt.show()

# GRafico 6 
plt.figure(figsize = (10,10))
x = np.linspace(-np.pi/3, 5 , num = 600)

# Señal
z = np.exp(np.sqrt(x**(1/8)))
# Señal con ruido
zRuido = z + np.random.normal(0,1.1, size = len(x))*0.01

# Ploteemos 
# plt.plot(x,z,'-g', x,zRuido,'*r')
plt.plot(x,zRuido,'-g', x,z,'*r')

# Coloquemos las etiquetas 
#TITULO :
plt.title("Señal  + Ruido (Gaussiano)")
# Etiqueta para el eje-X
plt.xlabel("Variable Independiente")
# Etiqueta para el eje-Y
plt.ylabel("Variable dependiente")

# Guardamos la imagen en el disco duro 
plt.savefig("Fig6_Señal_SeñalRuido")

plt.show()

# Documentacion de plot
help(plt.plot)

# GRafico 7
plt.plot(x,z,linestyle = "dotted")

# GRafico 8
plt.plot(x,z,linestyle = "dashdot")

# GRafico 9
plt.plot(x,z,ls = "dashdot")

# GRafico 10
plt.plot(x,zRuido,
         color = "#0922F7",
         marker = 'h',
         markersize = 2)

# Grafico 11 
# Deseo agregar al Grafico 10 una linea horizontal en y = 2.5

plt.figure(figsize = (16,9))

plt.plot(x,zRuido,
         color = "#0922F7",
         marker = 'h',
         markersize = 2)

# Linea Horizontal 
plt.axhline(y = 2.5,xmin = 0.1, xmax = 0.9,
            ls = "--",
            color = "#A26E70")

# Agreguemos una linea vertical en el punto medio del dominio
plt.axvline(x = 2.5, ymin = 0, ymax = 1,
            ls = '--',
            color = "#A26E70")

plt.savefig("Fig11_LineasHorVert", dpi = 300)

# Grafico 12
# Mostremos dos conjuntos de puntos , con formatos diferentes

x = np.linspace(-4*np.pi, 4*np.pi, 200)
y1S = np.sin(x*0.3)

plt.plot(x, y1S, 
         linestyle = "dashdot",
         color = "green")

x2C = np.linspace(-10, 5, 20)
y2C = np.cos(x2C*0.29 + 0.2)
plt.plot(x2C,y2C, 
         marker = 'D',
         color = "#DD2219")

# Agreguemos la linea que une el primer punto de y2C con el ultimo punto de y2C
# Coloquemos un marcador en el primer par ordenado de (x2C, y2C)
plt.plot(x2C[0], y2C[0], 
         marker = "H",
         color = "yellow")

# Coloquemos un marcador en el ultimo par ordenado de (x2C, y2C)
plt.plot(x2C[-1], y2C[-1],
         marker = "H",
         color = "yellow")

# Trazar una recta amarilla entre (x2C[0], y2C[0]) y (x2C[-1], y2C[-1])
# Implementemos una funcion para calcular todos los puntos de esa recta 
P0 = [x2C[0], y2C[0]]
P1 = [x2C[-1], y2C[-1]]
plt.plot( [P0[0], P1[0]] , [P0[1], P1[1]],
         color = "yellow")

# Grafico 13
# Resaltado de areas 


plt.figure(figsize = (16,9))

x = np.linspace(-np.pi/3, 5 , num = 600)

# Señal
z = np.exp(np.sqrt(x**(1/8)))
# Señal con ruido
zRuido = z + np.random.normal(0,1.1, size = len(x))*0.01

plt.plot(x,zRuido,
         color = "#0922F7",
         marker = 'h',
         markersize = 2)

# Linea Horizontal 
plt.axhline(y = 2.5,xmin = 0.1, xmax = 0.9,
            ls = "--",
            color = "#A26E70")

# Deseo pintar el rectangulo entre y = 2.4 e y = 2.6
plt.axhspan(ymin = 2.4, ymax = 2.6,xmin = 0.1, xmax =0.9,
            facecolor = "#A26E70",
            alpha = 0.2)

# Deseo pintar el rectangulo entre x=2.4 y x = 2.6
plt.axvspan(xmin = 2.4, xmax = 2.6,
            facecolor = "yellow",
            alpha = 0.2)

plt.savefig("Fig12_LineasHorVert", dpi = 300)

# Grafico 14
# Agreguemos texto

x1 = np.linspace(-8,8, 200)
y1 = np.sin(x1)

# Seleccionemos el punto de indice 100
plt.text(x1[100], y1[100], s = "Graf. 14", color = "red")

plt.plot(x1,y1)

# Grafico 15: Leyenda
plt.plot(x1,y1, label = "Funcion Trigonometrica")
plt.plot(x1,y1**2, label = "Cuadrado Funcion Trigonometrica")
# plt.legend()
# plt.legend(loc = "upper center",frameon = False)
# plt.legend(loc = (1.02, 0.5) ,frameon = True)
# plt.legend(loc = (0, 1.05) ,frameon = True)
plt.legend(loc = (0.4, -0.3) ,frameon = True)

plt.savefig("Graf15_leyendas", dpi = 300)

# Grafico 16
# Consideremos el caso en que la variable independiente es discreta
xCursos = ["Analisis Real", "Analisis Numerico", "Teoria de la medida"]
yAlumno1 = [12,11,9]


plt.plot(xCursos, yAlumno1,label = "6to Ciclo", marker = "s")

# Grafico 17
# Consideremos el caso en que la variable independiente es discreta
xCursos = ["Analisis Real", "Analisis Numerico", "Teoria de la medida"]
yAlumno1 = [12,11,9]
yAlumno2 = [2,13,19]
yAlumno3 = [10,5,2]

plt.plot(xCursos, yAlumno1,label = "6to Ciclo", marker = "s")
plt.plot(xCursos, yAlumno2,label = "7to Ciclo", marker = "D")
plt.plot(xCursos, yAlumno3,label = "8to Ciclo", marker = "h")

plt.legend()

# Necesitamos descargar los datos 
os.system("wget https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/stockholm_td_adj.dat.txt")
os.system("wget https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/Anomalias-1880-2017.csv")

os.listdir()

# Carguemos en memoria el archivo stockholm_td_adj.dat.txt
# !cat stockholm_td_adj.dat.txt
data = np.genfromtxt("stockholm_td_adj.dat.txt")

data.shape

# Acceso a la primera columna
year = data[:, 0]
print(year)

type(year)

year.dtype

# minimo valor 
np.min(year)

# Maximo valor de year
np.max(year)

# Carguemos en memoria el archivo : Anomalias-1880-2017.csv
Anomalias = np.genfromtxt("Anomalias-1880-2017.csv",
                          skip_header = 5,
                          delimiter = ",",
                          dtype = np.float64)

type(Anomalias)

# Numero de filas y numero de columnas
Anomalias.shape

# Veamos como se comportan los datos de Anomalias 
plt.figure(figsize = (8,5))
plt.plot(Anomalias[:,0], Anomalias[:,1], linestyle = "-",
          linewidth = 3,
          color = "red",
         label = "Global Land and Ocean Temperature Anomalies")
plt.legend()
plt.ylabel("Anomalias [°C]",
           {"fontsize" : 12,
           "color" : "blue","alpha": 0.5,
           "fontweight": 2.3})
plt.xlabel("Años",
           {"fontsize" : 12,
           "color" : "blue","alpha": 0.5,
           "fontweight": 2.3})
plt.title("Clase 6 : PIT 04 \nProgramacion en Python",
          {"fontsize" : 16,
           "color" : "blue",
           "fontweight": 2.3})
plt.suptitle("Abraham Zamudio",x = 0.81, y = 0)
plt.grid(axis = 'x',
         color='brown', linestyle='--', linewidth=4,
         alpha = 0.1)
plt.show()

# Listas de Estilos de matplotlib
plt.style.available

plt.figure(num = 1)

# MOdifiquemos el estilo del ploteo
plt.style.use('seaborn-dark')

plt.plot(x1,y1, label = "Funcion Trigonometrica")
plt.plot(x1,y1**2, label = "Cuadrado Funcion Trigonometrica")
plt.legend()

plt.figure(num = 2)
# MOdifiquemos el estilo del ploteo
plt.style.use('dark_background')
plt.plot(x1,y1, label = "Funcion Trigonometrica")
plt.plot(x1,y1**2, label = "Cuadrado Funcion Trigonometrica")


plt.figure(num = 3)
# MOdifiquemos el estilo del ploteo
plt.style.use('ggplot')
plt.plot(x1,y1, label = "Funcion Trigonometrica")
plt.plot(x1,y1**2, label = "Cuadrado Funcion Trigonometrica")


plt.show()